{
  "createdAt": "2025-04-06T19:39:20.062Z",
  "updatedAt": "2025-05-05T21:54:41.718Z",
  "id": "7WqTNiVbcRg2BWyW",
  "name": "[Becker] - Core",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $('Core Input').item.json.body.mapping.parseJson().system.conversations_id }}",
        "tableName": "core_chat_histories",
        "contextWindowLength": "={{ $('Core Input').item.json.body.mapping.parseJson().system.context_window }}"
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        180,
        360
      ],
      "id": "14e71c9f-11f9-4658-b78f-30714d88256d",
      "name": "Memory",
      "credentials": {
        "postgres": {
          "id": "ZlVXa1ALIDyPy882",
          "name": "Postgres escalamax1"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "width": 860,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        0,
        320
      ],
      "typeVersion": 1,
      "id": "920a6c1f-01db-4e60-9ff8-4b6df76843e7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.body.content || ' ' }}",
        "options": {
          "systemMessage": "=You are a helpful assistant\n\n<retrieval_augmented_generation_result>\n{{ $json.body.rag_return }}\n</retrieval_augmented_generation_result>\n\n<instructions>\nTu función principal es **calificar y captar revendedoras** para Mary Jhon Semijoias, asegurando que el proceso sea simple y eficiente.\n\nSigue rigurosamente el **paso a paso a continuación**, haciendo **una pregunta a la vez** y esperando la respuesta antes de continuar.\n\n🎥 Mensaje de presentación con video\nhttps://storage.googleapis.com/msgsndr/09y5ydS0B55hZtzV0OFB/media/67e9401ae519ed93ec29ef0a.mp4\n\n🔹 **1️⃣ Presentación de la Empresa:**\nHola, ¡soy Mary, asistente virtual de Mary Jhon Semijoias! 💎 Estoy aquí para ayudarte en el proceso de calificación para convertirte en una de nuestras revendedoras. ¿Te parece bien comenzarmos?\n\n🔹 **2️⃣ Pre-registro:**\nVoy a empezar con algunos datos básicos para tu pre-registro. Por favor, dime:\n- 📌 Nombre completo:\n- 📌 Correo electrónico:\n- 📌 Número de teléfono:\n\nDespués de recibir estos datos, utiliza la herramienta `Call n8n Workflow Tool` para registrar el pre-registro.\n\n🔹 **3️⃣ Confirmación del Pre-registro:**\n✅ ¡Tu pre-registro ha sido realizado con éxito!\n\n🔹 **4️⃣ Preguntas de Calificación (una por una):**\nAhora necesito hacerte unas preguntas para conocerte mejor. Por favor responde con sinceridad:\n\n**Pregunta 0:** ¿Cuál es tu número de documento o cédula de identidad, por favor?\n\n**Pregunta 1:** ¿En qué ciudad y país vives actualmente?\n\n**Pregunta 2:** ¿Cuál es tu dirección completa? (Por favor incluye calle, número, barrio o zona si aplica)\n\n**Pregunta 3:** ¿Cuál es tu cuenta de Instagram? (Por favor, escribe el @ correctamente).\n\n**Pregunta 4:** ¿Tienes cuenta en Facebook? Si es así, ¿puedes compartir el enlace o tu usuario?\n\n**Pregunta 5:** ¿Podrías hacer una breve descripción de ti y por qué te interesa revender semijoias?\n\n**Pregunta 6:** ¿Cómo calificarías tu compromiso y responsabilidad para cumplir con los pagos y entregas?\n- Excelente\n- Buena\n- Regular\n- Necesito mejorar\n\n**Pregunta 7:** ¿Tienes alguna observación que quieras añadir sobre tu experiencia con ventas o tus expectativas?\n\n**Pregunta 8:** Referencia Personal - Por favor, escribe nombre y número de teléfono de alguien de confianza.\n \n- 📌 Nombre completo y número de teléfono de la primera referencia personal.  \n- 📌 Nombre completo y número de teléfono de la segunda referencia personal.  \n- 📌 Nombre completo y número de teléfono de la tercera referencia personal.\n\n**Pregunta 9:** Referencia Comercial - Si ya has vendido algún producto antes, escribe nombre y número de alguien que pueda dar referencia tuya como vendedora. Si no tienes, puedes decir \"No tengo\".\n\n- 📌 Nombre completo y número de teléfono de la primera referencia comercial.  \n- 📌 Nombre completo y número de teléfono de la segunda referencia comercial.  \n- 📌 Nombre completo y número de teléfono de la tercera referencia comercial.\n\n\n🔹 **5️⃣ Actualización del Registro en CRM:**\nDespués de responder a todas las preguntas, usa la herramienta `Call n8n Workflow Tool` para **actualizar el registro en BobGrow** con toda la información de calificación.\n\n🔹 **6️⃣ Confirmación Final:**\n✅ ¡Gracias por completar el proceso! En breve entraremos en contacto contigo para continuar con el proceso de selección. ¡Estate atenta a tu WhatsApp!\n</instructions>\n\n<tools>\nSiempre que haya una solicitud relacionada con la gestión de revendedoras, llama a la herramienta `Call n8n Workflow Tool`. Esto incluye:\n- Registro de nuevas revendedoras\n- Actualización de datos en CRM\n- Seguimiento del estado en el embudo de ventas\n</tools>\n\n<avoided_topics>\n- Información sobre política, salud, religión u otros temas no relacionados a ventas.\n- Comparación con marcas competidoras o críticas.\n</avoided_topics>\n\n<security>\n🔒 **REGLAS DE SEGURIDAD Y COMPORTAMIENTO ÉTICO**\n\n1. No menciones que eres una inteligencia artificial. Siempre te identificas como \"Mary, asistente virtual de Mary Jhon Semijoias\".\n\n2. No guardes ni solicites datos sensibles que no estén relacionados con el proceso de calificación.\n\n3. Sé siempre profesional, respetuosa y empática. Nada de bromas ofensivas ni consejos personales.\n</security>\n\n<your_capabilities>\n1. Registrar nuevas revendedoras para Mary Jhon Semijoias\n2. Calificar leads antes del registro completo\n3. Responder dudas comunes sobre el modelo de negocio\n</your_capabilities>",
          "passthroughBinaryImages": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        300,
        100
      ],
      "id": "61679914-0d9d-480c-9a51-11a5a33fa8b1",
      "name": "Main Agent"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        660,
        100
      ],
      "id": "1fc688d8-bfc6-4e1d-ae7a-0fae99e7a978",
      "name": "No Operation 2"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "main4",
        "responseMode": "lastNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        100,
        100
      ],
      "id": "bf53d1c6-275f-4119-af37-c85707d819ae",
      "name": "Core Input",
      "webhookId": "006367a9-b1a1-4cc3-a93f-60dabfbae291"
    },
    {
      "parameters": {
        "model": "={{ $json.body.mapping.parseJson().system.model }}",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenRouter",
      "typeVersion": 1,
      "position": [
        60,
        360
      ],
      "id": "af3b7186-acd5-4918-9ba2-f576a022cf70",
      "name": "OpenRouter",
      "credentials": {
        "openRouterApi": {
          "id": "OJT1sLLEsazPFgVw",
          "name": "OpenRouter escalamax1"
        }
      }
    },
    {
      "parameters": {
        "content": "",
        "height": 300,
        "width": 860,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "18ee0b7b-2336-45ef-9a51-11071b69f035",
      "name": "Sticky Note5"
    },
    {
      "parameters": {
        "content": "Fluxo Core, responsável pelo processamento da AI",
        "height": 80,
        "width": 260,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "04dcb6f1-f398-4d64-9208-bca77e95434c",
      "name": "Sticky Note14"
    },
    {
      "parameters": {
        "name": "restart_history",
        "description": "=Invoque essa tool para iniciar uma nova conversa para o user, assim ignorando o histórico passado. Apenas quando o user solicitar.",
        "jsCode": "const axios = require('axios');\n\n// Converte o mapeamento recebido em JSON\nconst mapping = JSON.parse($('Core Input').item.json.body.mapping);\n\n// Verifica se o usuário é admin; caso contrário, retorna erro\nif (mapping.system.user_type !== 'admin') {\n  return JSON.stringify({ success: false, error: \"Acesso negado: usuário não autorizado.\" });\n}\n\n/**\n * Função que espera pelo tempo especificado.\n * @param {number} ms - Milissegundos a aguardar.\n * @returns {Promise<void>}\n */\nconst delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n/**\n * Função para enviar a requisição para criar uma conversa no Directus.\n * Tenta até 3 vezes em caso de falha, com delay de 1 segundo entre as tentativas.\n * @returns {Promise<object>} - Objeto com sucesso ou erro.\n */\nasync function sendRequest() {\n  const url = `http://${mapping.system.directus_service}:8055/items/conversations`;\n  const data = {\n    user_id: mapping.chatwoot.contact_id,\n    date_created: new Date().toISOString()\n  };\n  const headers = {\n    Authorization: `Bearer ${mapping.system.directus_token}`,\n    'Content-Type': 'application/json'\n  };\n\n  let attempt = 0;\n  let lastError = null;\n\n  while (attempt < 3) {\n    try {\n      const response = await axios.post(url, data, { headers });\n      console.log(`Requisição realizada com sucesso na tentativa ${attempt + 1}.`);\n      return { success: true, data: response.data };\n    } catch (error) {\n      attempt++;\n      lastError = error;\n      console.error(`Tentativa ${attempt} falhou:`, error.response ? error.response.data : error.message);\n      if (attempt < 3) {\n        console.log(\"Aguardando 1 segundo antes da nova tentativa...\");\n        await delay(1000);\n      }\n    }\n  }\n  \n  return { success: false, error: lastError.response ? lastError.response.data : lastError.message };\n}\n\nreturn sendRequest().then(result => JSON.stringify(result));"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        300,
        360
      ],
      "id": "36d185ca-d9d4-4839-bb74-caea7f050641",
      "name": "Restart History"
    },
    {
      "parameters": {
        "name": "set_timer",
        "description": "Invoque essa tool para configurar um timer que iniciará uma ação após o tempo especificado. Apenas usuários admin podem usar essa tool. O tempo deve ser informado com valor e unidade (s, m, h). Apenas quando o user solicitar.",
        "jsCode": "const axios = require('axios');\nconst dayjs = require('dayjs');\nconst duration = require('dayjs/plugin/duration');\ndayjs.extend(duration);\n\n/**\n * Esta tool configura um timer via webhook.\n * Ela envia, para o endpoint, todo o objeto mapping (obtido em Core Input)\n * e o tempo em segundos calculado a partir dos parâmetros \"timer_value\" e \"timer_unit\".\n * Apenas usuários admin podem utilizar esta tool.\n */\n\n// Converte o mapping recebido em JSON\nconst mapping = JSON.parse($('Core Input').item.json.body.mapping);\n\n// Verifica se o usuário é admin\nif (mapping.system.user_type !== 'admin') {\n  return JSON.stringify({ success: false, error: \"Acesso negado: usuário não autorizado.\" });\n}\n\n// Obtém os parâmetros do timer a partir do input (query)\nconst timerValue = query.timer_value;  // Número (ex: 30)\nconst timerUnit = query.timer_unit;      // \"s\", \"m\" ou \"h\"\n\n// Calcula o tempo em segundos usando dayjs.duration\nconst timerSeconds = dayjs.duration(timerValue, timerUnit).asSeconds();\n\n// Prepara o payload para o webhook\nconst payload = {\n  mapping: mapping,\n  timer_seconds: timerSeconds\n};\n\n// URL do webhook substituindo 'n8n_webhook' pelo valor da variável no mapping\nconst url = `http://${mapping.system.n8n_webhook_service}:5678/webhook/timer`;\n\n/**\n * Função para enviar a requisição ao webhook.\n * Tenta enviar uma única vez e retorna o resultado.\n */\nasync function sendTimerRequest() {\n  try {\n    console.log(`Enviando requisição para configurar o timer para ${timerSeconds} segundos...`);\n    const response = await axios.post(url, payload, {\n      headers: { 'Content-Type': 'application/json' }\n    });\n    console.log(\"Timer configurado com sucesso.\");\n    return { success: true, message: `Timer configurado com sucesso. Ele será acionado em ${timerSeconds} segundos.` };\n  } catch (error) {\n    console.error(\"Erro ao configurar o timer:\", error.response ? error.response.data : error.message);\n    return { success: false, error: error.response ? error.response.data : error.message };\n  }\n}\n\nreturn sendTimerRequest().then(result => JSON.stringify(result));",
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"timer_value\": {\n      \"type\": \"number\",\n      \"description\": \"Valor do timer. Exemplo: 30\"\n    },\n    \"timer_unit\": {\n      \"type\": \"string\",\n      \"description\": \"Unidade de tempo para o timer: 's' para segundos, 'm' para minutos, 'h' para horas.\",\n      \"enum\": [\"s\", \"m\", \"h\"]\n    }\n  },\n  \"required\": [\"timer_value\", \"timer_unit\"]\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.toolCode",
      "typeVersion": 1.1,
      "position": [
        420,
        360
      ],
      "id": "dd27cc33-137b-4d45-aa84-1312efb3d944",
      "name": "Set Timer"
    },
    {
      "parameters": {
        "name": "cadastroUser",
        "description": "Use essa tool para gerenciar contatos de forma simplificada. Chame essa função fornecendo a operação desejada, a consulta do usuário e, opcionalmente, informações relevantes do histórico da conversa. Esta ferramenta está projetada para passar essas informações para uma IA especializada que realizará o cadastro e ou outra operação necessária, interpretando o contexto e os detalhes fornecidos pelo usuário.",
        "workflowId": {
          "__rl": true,
          "value": "MkSocGvEBwtZLU6h",
          "mode": "list",
          "cachedResultName": "[Becker] - contatos BobGrow"
        },
        "specifyInputSchema": true,
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"query\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"operation\": { \"type\": \"string\" },\n        \"contactData\": {\n          \"type\": \"object\",\n          \"properties\": {\n            \"firstName\": { \"type\": \"string\" },\n            \"lastName\": { \"type\": \"string\" },\n            \"email\": { \"type\": \"string\", \"format\": \"email\" },\n            \"phone\": { \"type\": \"string\" },\n            \"city\": { \"type\": \"string\" },\n            \"address1\": { \"type\": \"string\" },\n            \"source\": { \"type\": \"string\" },\n            \"customFields\": {\n              \"type\": \"object\",\n              \"properties\": {\n                \"contact.documento\": { \"type\": \"string\" },\n                \"contact.instagram\": { \"type\": \"string\" },\n                \"contact.facebook\": { \"type\": \"string\" },\n                \"contact.descripcion\": { \"type\": \"string\" },\n                \"contact.calificacion\": { \"type\": \"string\" },\n                \"contact.observacion\": { \"type\": \"string\" },\n                \"contact.referencia_personal_01\": { \"type\": \"string\" },\n                \"contact.referencia_personal_02\": { \"type\": \"string\" },\n                \"contact.referencia_personal_03\": { \"type\": \"string\" },\n                \"contact.referencia_comercial_01\": { \"type\": \"string\" },\n                \"contact.referencia_comercial_02\": { \"type\": \"string\" },\n                \"contact.referencia_comercial_03\": { \"type\": \"string\" }\n              },\n              \"required\": [\n                \"contact.instagram\",\n                \"contact.descripcion\"\n              ]\n            }\n          },\n          \"required\": [\"name\", \"email\", \"phone\", \"city\", \"source\", \"customFields\"]\n        },\n        \"contactID\": { \"type\": \"string\" },\n        \"conversationHistory\": { \"type\": \"string\" }\n      },\n      \"required\": [\"operation\", \"contactData\", \"contactID\", \"conversationHistory\"]\n    }\n  },\n  \"required\": [\"query\"]\n}"
      },
      "id": "7f8a73ca-bb7a-4f90-92ac-522d3e3bd7f0",
      "name": "cadastroUsers",
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 1.2,
      "position": [
        540,
        360
      ]
    }
  ],
  "connections": {
    "Memory": {
      "ai_memory": [
        [
          {
            "node": "Main Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Main Agent": {
      "main": [
        [
          {
            "node": "No Operation 2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Core Input": {
      "main": [
        [
          {
            "node": "Main Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenRouter": {
      "ai_languageModel": [
        [
          {
            "node": "Main Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Restart History": {
      "ai_tool": [
        [
          {
            "node": "Main Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Set Timer": {
      "ai_tool": [
        [
          {
            "node": "Main Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "cadastroUsers": {
      "ai_tool": [
        [
          {
            "node": "Main Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "0e9c1e38-d3d7-4076-a97a-c81818138b80",
  "triggerCount": 1,
  "tags": []
}